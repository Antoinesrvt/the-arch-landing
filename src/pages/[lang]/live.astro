---
import { getCollection } from 'astro:content';
import I18nLayout from '../../layouts/I18nLayout.astro';
import { useTranslations, type Lang } from '../../i18n/utils';
import type { TranslationFunction } from '../../types';

// Prerender this page as static HTML
export const prerender = true;

export async function getStaticPaths() {
  const supportedLangs: Lang[] = ['fr', 'en'];
  return supportedLangs.map(lang => ({ params: { lang } }));
}

// Get the lang from params
const { lang } = Astro.params as { lang: Lang };
const t = useTranslations(lang) as TranslationFunction;

//Get all episodes
const allEpisodes = await getCollection('episodes', ({ data }) => {
  return data.lang === lang;
});

// Sort by date (newest first)
const episodes = allEpisodes.sort((a, b) => 
  b.data.publishedDate.getTime() - a.data.publishedDate.getTime()
);

// Get unique categories
const categories = [...new Set(episodes.map(ep => ep.data.category))];

// Count published vs coming soon
const publishedCount = episodes.filter(ep => ep.data.status === 'published').length;
const comingSoonCount = episodes.filter(ep => ep.data.status === 'coming-soon').length;

const pageTitle = lang === 'fr' ? 'Lives & Articles Web3' : 'Lives & Web3 Articles';
const pageDescription = lang === 'fr' 
  ? 'Découvrez nos interviews approfondies avec les acteurs clés de l\'écosystème Web3 français et international. Analyses, insights et retours d\'expérience.'
  : 'Discover our in-depth interviews with key players in the French and international Web3 ecosystem. Analysis, insights and feedback.';
---

<I18nLayout 
  lang={lang}
  title={pageTitle}
  description={pageDescription}
>
    <!-- Hero Section - Magazine Style -->
  <section class="relative overflow-hidden border-b border-white/10">
    <div class="absolute inset-0 animated-gradient opacity-20 parallax-bg" aria-hidden="true" id="hero-bg"></div>
    <div class="container mx-auto px-6 py-12 relative z-10">
      <!-- Header -->
      <div class="mb-12">
        <div class="flex items-baseline gap-4 mb-4">
          <h1 class="text-4xl md:text-5xl font-bold text-white">
            {lang === 'fr' ? 'Insights Web3' : 'Web3 Insights'}
          </h1>
          <div class="flex items-center gap-3 text-sm">
            <div class="flex items-center gap-1.5">
              <div class="w-2 h-2 bg-green-400 rounded-full"></div>
              <span class="text-gray-400"><strong class="text-white">{publishedCount}</strong> {lang === 'fr' ? 'publiés' : 'published'}</span>
            </div>
            <span class="text-gray-600">•</span>
            <div class="flex items-center gap-1.5">
              <div class="w-2 h-2 bg-yellow-400 rounded-full"></div>
              <span class="text-gray-400"><strong class="text-white">{comingSoonCount}</strong> {lang === 'fr' ? 'bientôt' : 'soon'}</span>
            </div>
          </div>
        </div>
        <p class="text-lg text-gray-400 max-w-3xl">
          {lang === 'fr' 
            ? 'Interviews approfondies, analyses techniques et retours d\'expérience avec les acteurs clés de l\'écosystème.'
            : 'In-depth interviews, technical analysis and insights from key players in the ecosystem.'}
        </p>
          </div>
          
      <!-- Featured Episode -->
      {episodes.length > 0 && episodes[0].data.status === 'published' && (
        <a 
          href={`/${lang}/live/${episodes[0].slug}`}
          class="group block mb-12 bg-gradient-to-br from-white/5 to-white/[0.02] border border-white/10 rounded-2xl overflow-hidden hover:border-purple-500/30 transition-all duration-500"
        >
          <div class="grid md:grid-cols-2 gap-0">
            <!-- Image -->
            <div class="relative aspect-video md:aspect-auto overflow-hidden bg-gray-900">
              <img 
                src={episodes[0].data.thumbnail}
                alt={episodes[0].data.title}
                class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-700"
                loading="eager"
              />
              <div class="absolute top-4 left-4">
                <span class="px-3 py-1 bg-purple-500/90 text-white text-xs font-bold rounded-lg backdrop-blur-sm">
                  {lang === 'fr' ? '⭐ À la une' : '⭐ Featured'}
                </span>
              </div>
              <div class="absolute bottom-4 right-4">
                <span class="px-2 py-1 bg-black/80 text-white text-xs font-semibold rounded backdrop-blur-sm">
                  {episodes[0].data.duration}
            </span>
              </div>
              <!-- Play Icon -->
              <div class="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300 bg-black/30">
                <svg class="w-20 h-20 text-white" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M6.3 2.841A1.5 1.5 0 004 4.11V15.89a1.5 1.5 0 002.3 1.269l9.344-5.89a1.5 1.5 0 000-2.538L6.3 2.84z"/>
                </svg>
              </div>
            </div>
            
            <!-- Content -->
            <div class="p-8 flex flex-col justify-center">
              <div class="mb-3">
                <span class="px-3 py-1 bg-purple-500/20 border border-purple-500/30 text-purple-300 rounded-lg text-xs font-semibold">
                  {episodes[0].data.category}
                </span>
              </div>
              <h2 class="text-2xl md:text-3xl font-bold text-white mb-4 group-hover:text-purple-300 transition-colors">
                {episodes[0].data.title}
              </h2>
              <div class="flex items-center gap-3 mb-4">
                <img 
                  src={episodes[0].data.guest.avatar}
                  alt={episodes[0].data.guest.name}
                  class="w-12 h-12 rounded-full border-2 border-white/20"
                  loading="eager"
                />
                <div>
                  <p class="text-sm font-semibold text-white">{episodes[0].data.guest.name}</p>
                  <p class="text-xs text-gray-400">{episodes[0].data.guest.role} @ {episodes[0].data.guest.company}</p>
                </div>
              </div>
              <p class="text-gray-400 mb-6 line-clamp-3">
                {episodes[0].data.summary}
              </p>
              <div class="flex items-center gap-2 text-purple-400 font-semibold">
                {lang === 'fr' ? 'Lire l\'article complet' : 'Read full article'}
                <svg class="w-5 h-5 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"/>
                </svg>
              </div>
            </div>
          </div>
        </a>
      )}
      </div>
    </section>

    <!-- Search & Filter Section -->
  <section class="container mx-auto px-6 my-6">
    <div class="max-w-6xl mx-auto">
          <!-- Search Bar -->
      <div class="mb-6">
            <div class="relative">
              <svg class="absolute left-4 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
              </svg>
              <input 
                type="text" 
            id="search-input"
            placeholder={lang === 'fr' ? 'Rechercher par titre, invité ou tag...' : 'Search by title, guest or tag...'}
            class="w-full pl-12 pr-4 py-4 bg-white/5 border border-white/10 rounded-xl text-white placeholder-gray-500 focus:outline-none focus:border-purple-500/50 transition-colors"
              />
            </div>
          </div>
          
      <!-- Category Filters -->
      <div class="flex flex-wrap gap-3" id="category-filters">
        <button
          class="category-filter active px-4 py-2 bg-white/10 border border-white/20 rounded-lg text-white font-semibold hover:bg-white/20 transition-all duration-300"
          data-category="all"
        >
          {lang === 'fr' ? 'Tous' : 'All'} ({episodes.length})
        </button>
        {categories.map(category => {
          const count = episodes.filter(ep => ep.data.category === category).length;
          return (
            <button
              class="category-filter px-4 py-2 bg-white/5 border border-white/10 rounded-lg text-gray-400 font-semibold hover:bg-white/10 hover:text-white transition-all duration-300"
              data-category={category}
            >
              {category} ({count})
            </button>
          );
        })}
        </div>
      </div>
    </section>

    <!-- All Episodes Grid -->
  <section class="container mx-auto px-6 py-20">
    <div class="max-w-6xl mx-auto">
      <h2 class="text-2xl md:text-3xl font-bold text-white mb-8 flex items-center gap-3">
        <span class="w-1 h-8 bg-gradient-to-b from-purple-500 to-pink-500 rounded-full"></span>
        {lang === 'fr' ? 'Tous les articles' : 'All Articles'}
      </h2>
      <div id="episodes-grid" class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
        {episodes.slice(episodes[0]?.data.status === 'published' ? 1 : 0).map((episode) => (
            <article 
            class="episode-card group relative bg-white/5 border border-white/10 rounded-2xl overflow-hidden hover:bg-white/10 hover:border-purple-500/30 transition-all duration-300"
            data-category={episode.data.category}
            data-tags={episode.data.tags.join(',')}
            data-guest={episode.data.guest.name.toLowerCase()}
            data-title={episode.data.title.toLowerCase()}
            data-status={episode.data.status}
          >
            <!-- Thumbnail -->
            <div class="relative aspect-video overflow-hidden bg-gray-900">
              <img
                src={episode.data.thumbnail}
                alt={episode.data.title}
                class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500"
                loading="lazy"
              />
              <!-- Status Badge -->
              {episode.data.status === 'coming-soon' && (
                <div class="absolute top-3 right-3">
                  <span class="px-3 py-1 bg-yellow-500/90 text-gray-900 text-xs font-bold rounded-lg backdrop-blur-sm">
                    {lang === 'fr' ? 'Bientôt' : 'Soon'}
                  </span>
                </div>
              )}
              <!-- Duration Badge -->
              <div class="absolute bottom-3 right-3">
                <span class="px-2 py-1 bg-black/80 text-white text-xs font-semibold rounded backdrop-blur-sm">
                  {episode.data.duration}
                </span>
              </div>
              <!-- Play Icon Overlay -->
              <div class="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300 bg-black/30">
                <svg class="w-16 h-16 text-white" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M6.3 2.841A1.5 1.5 0 004 4.11V15.89a1.5 1.5 0 002.3 1.269l9.344-5.89a1.5 1.5 0 000-2.538L6.3 2.84z"/>
                        </svg>
                    </div>
                  </div>
                  
            <!-- Content -->
            <div class="p-6">
              <!-- Category Tag -->
              <div class="mb-3">
                <span class="px-3 py-1 bg-purple-500/20 border border-purple-500/30 text-purple-300 rounded-lg text-xs font-semibold">
                  {episode.data.category}
                      </span>
                </div>

              <!-- Title -->
              <h3 class="text-xl font-bold text-white mb-3 line-clamp-2 group-hover:text-purple-300 transition-colors">
                {episode.data.title}
              </h3>

              <!-- Guest Info -->
              <div class="flex items-center gap-3 mb-4">
                <img
                  src={episode.data.guest.avatar}
                  alt={episode.data.guest.name}
                  class="w-10 h-10 rounded-full border border-white/20"
                  loading="lazy"
                />
                <div class="flex-1 min-w-0">
                  <p class="text-sm font-semibold text-white truncate">{episode.data.guest.name}</p>
                  <p class="text-xs text-gray-400 truncate">{episode.data.guest.company}</p>
                </div>
                </div>

              <!-- Summary -->
              <p class="text-sm text-gray-400 mb-4 line-clamp-3">
                {episode.data.summary}
              </p>

              <!-- Reading Time & Status -->
              <div class="flex items-center gap-3 mb-4 text-xs text-gray-500">
                <span class="flex items-center gap-1">
                  <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"/>
                  </svg>
                  {Math.ceil((episode.body?.length || 1000) / 1000)} min
                </span>
                {episode.data.status === 'published' ? (
                  <span class="flex items-center gap-1 text-green-400">
                    <svg class="w-3.5 h-3.5" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                    </svg>
                    {lang === 'fr' ? 'Publié' : 'Published'}
                  </span>
                ) : (
                  <span class="flex items-center gap-1 text-yellow-400">
                    <svg class="w-3.5 h-3.5" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"/>
                    </svg>
                    {lang === 'fr' ? 'Bientôt' : 'Soon'}
                  </span>
                )}
              </div>

              <!-- Read More Button -->
              <a
                href={`/${lang}/live/${episode.slug}`}
                class="inline-flex items-center gap-2 text-purple-400 hover:text-purple-300 font-semibold text-sm group-hover:gap-3 transition-all duration-300"
              >
                {lang === 'fr' ? 'Lire l\'article' : 'Read article'}
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                    </svg>
                  </a>
              </div>
            </article>
          ))}
        </div>
        
      <!-- No Results Message -->
        <div id="no-results" class="hidden text-center py-20">
        <svg class="w-20 h-20 text-gray-600 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
        <h3 class="text-2xl font-bold text-white mb-2">
          {lang === 'fr' ? 'Aucun résultat' : 'No results'}
        </h3>
        <p class="text-gray-400">
          {lang === 'fr' ? 'Essayez une autre recherche ou catégorie' : 'Try another search or category'}
        </p>
        </div>
      </div>
    </section>

  <!-- Scroll Animation & Search Script -->
<script>
  // Intersection Observer for scroll animations
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -100px 0px'
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add('animate-fade-in');
        observer.unobserve(entry.target);
      }
    });
  }, observerOptions);

  // Observe all episode cards
  document.addEventListener('DOMContentLoaded', () => {
    const cards = document.querySelectorAll('.episode-card');
    cards.forEach((card) => {
      card.classList.add('opacity-0');
      observer.observe(card);
    });

    // Parallax effect on scroll
    const heroBg = document.getElementById('hero-bg');
    if (heroBg) {
      window.addEventListener('scroll', () => {
        const scrolled = window.scrollY;
        const parallaxSpeed = 0.5;
        heroBg.style.transform = `translateY(${scrolled * parallaxSpeed}px)`;
      });
    }
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
      const searchInput = document.getElementById('search-input') as HTMLInputElement;
      const categoryFilters = document.querySelectorAll('.category-filter');
      const episodeCards = document.querySelectorAll('.episode-card');
    const noResults = document.getElementById('no-results');
      
      let activeCategory = 'all';
      let searchQuery = '';

    function filterEpisodes() {
        let visibleCount = 0;

        episodeCards.forEach(card => {
        const cardElement = card as HTMLElement;
        const category = cardElement.dataset.category || '';
          const tags = cardElement.dataset.tags || '';
          const guest = cardElement.dataset.guest || '';
          const title = cardElement.dataset.title || '';
          
          const matchesCategory = activeCategory === 'all' || category === activeCategory;
          const matchesSearch = searchQuery === '' || 
            title.includes(searchQuery) ||
            guest.includes(searchQuery) ||
            tags.toLowerCase().includes(searchQuery);

        if (matchesCategory && matchesSearch) {
          cardElement.classList.remove('hidden');
            visibleCount++;
        } else {
          cardElement.classList.add('hidden');
        }
      });

        // Show/hide no results message
        if (noResults) {
          if (visibleCount === 0) {
          noResults.classList.remove('hidden');
        } else {
          noResults.classList.add('hidden');
        }
      }
    }

      // Search input handler
      if (searchInput) {
        searchInput.addEventListener('input', (e) => {
          searchQuery = (e.target as HTMLInputElement).value.toLowerCase();
        filterEpisodes();
        });
      }

      // Category filter handlers
      categoryFilters.forEach(filter => {
        filter.addEventListener('click', () => {
          // Update active state
          categoryFilters.forEach(f => f.classList.remove('active', 'bg-white/10', 'border-white/20', 'text-white'));
          categoryFilters.forEach(f => f.classList.add('bg-white/5', 'border-white/10', 'text-gray-400'));
          
          filter.classList.remove('bg-white/5', 'border-white/10', 'text-gray-400');
          filter.classList.add('active', 'bg-white/10', 'border-white/20', 'text-white');
          
          // Update active category
          activeCategory = filter.getAttribute('data-category') || 'all';
          filterEpisodes();
        });
    });
  });
</script>

<style>
    .animated-gradient {
      background: linear-gradient(
        45deg,
        var(--color-primary),
        var(--color-secondary),
        var(--color-accent)
      );
      background-size: 200% 200%;
      animation: gradient 15s ease infinite;
    }

    @keyframes gradient {
      0% {
        background-position: 0% 50%;
      }
      50% {
        background-position: 100% 50%;
      }
      100% {
        background-position: 0% 50%;
      }
    }

    .animate-title {
      animation: fadeInUp 0.8s ease-out;
    }

    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(30px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    /* Scroll-triggered fade-in animation */
    .animate-fade-in {
      animation: fadeInScale 0.6s ease-out forwards;
    }

    @keyframes fadeInScale {
      from {
        opacity: 0;
        transform: translateY(30px) scale(0.95);
      }
      to {
        opacity: 1;
        transform: translateY(0) scale(1);
      }
    }

    /* Parallax effect for hero background */
    .parallax-bg {
      transition: transform 0.3s ease-out;
    }

    /* Utility classes for line clamping */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
</I18nLayout>