---
// Client-side scripts component using Astro's proper approach
import { AppManager } from '../scripts/app-manager';
import type { AppConfig } from '../scripts/types';

export interface Props {
  currentLang: 'fr' | 'en';
}

const { currentLang } = Astro.props;

// Configuration for the app
const appConfig: AppConfig = {
  language: {
    currentLang,
    availableLanguages: [
      { code: 'fr', name: 'FranÃ§ais', flag: 'ðŸ‡«ðŸ‡·' },
      { code: 'en', name: 'English', flag: 'ðŸ‡¬ðŸ‡§' }
    ]
  },
  navigation: {
    smoothScroll: true,
    offset: -80,
    duration: 1.2
  },
  animations: {
    floatingCards: true,
    scrollAnimations: true,
    reducedMotion: false
  }
};
---

<!-- This component handles all client-side functionality -->
<script>
  import { AppManager } from '../scripts/app-manager';
  import { CardEffectsManager } from '../scripts/card-effects';
  
  // Initialize the app when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const currentLang = '${currentLang}' as 'fr' | 'en';
    
    // Wait a bit for libraries to load
    setTimeout(() => {
      const app = new AppManager({
        language: {
          currentLang,
          availableLanguages: [
            { code: 'fr', name: 'FranÃ§ais', flag: 'ðŸ‡«ðŸ‡·' },
            { code: 'en', name: 'English', flag: 'ðŸ‡¬ðŸ‡§' }
          ]
        },
        navigation: {
          smoothScroll: true,
          offset: -80,
          duration: 1.2
        },
        animations: {
          floatingCards: true,
          scrollAnimations: true,
          reducedMotion: false
        }
      });
      
      app.init();
      
      // Initialize card effects
      const cardEffects = new CardEffectsManager();
      cardEffects.init();
      
      // Setup scroll progress indicator
      setupScrollProgress();
      
      // Initialize analytics tracking
      setupAnalytics();
    }, 1000);
  });
  
  function setupScrollProgress() {
    const progressBar = document.getElementById('scroll-progress');
    if (!progressBar) return;
    
    function updateProgress() {
      if (!progressBar) return;
      
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      const scrollHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight;
      const scrollPercent = (scrollTop / scrollHeight) * 100;
      
      progressBar.style.width = `${scrollPercent}%`;
    }
    
    // Throttle scroll events for better performance
    let ticking = false;
    function requestTick() {
      if (!ticking) {
        requestAnimationFrame(updateProgress);
        ticking = true;
      }
    }
    
    window.addEventListener('scroll', () => {
      ticking = false;
      requestTick();
    });
    
    // Initial update
    updateProgress();
  }
  
  // Simple analytics tracking system
  function setupAnalytics() {
    // Create global trackEvent function
    (window as any).trackEvent = function(category: string, action: string, label?: string, value?: number) {
      // Log to console in development
      if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
        console.log('ðŸ“Š Analytics Event:', { category, action, label, value });
      }
      
      // TODO: Replace with your actual analytics service (Google Analytics, Plausible, etc.)
      // Example for Google Analytics:
      // if (typeof gtag !== 'undefined') {
      //   gtag('event', action, {
      //     event_category: category,
      //     event_label: label,
      //     value: value
      //   });
      // }
      
      // Example for Plausible:
      // if (typeof plausible !== 'undefined') {
      //   plausible(action, { props: { category, label, value } });
      // }
    };
    
    // Track page view
    (window as any).trackEvent('page', 'view', window.location.pathname);
    
    // Track CTA clicks
    const ctaButtons = document.querySelectorAll('a[href*="cal.com"], a[href*="tally.so"]');
    ctaButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        const href = (e.currentTarget as HTMLAnchorElement).href;
        const text = (e.currentTarget as HTMLElement).textContent?.trim();
        (window as any).trackEvent('cta', 'click', text || href);
      });
    });
    
    // Track external links
    const externalLinks = document.querySelectorAll('a[target="_blank"]');
    externalLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        const href = (e.currentTarget as HTMLAnchorElement).href;
        (window as any).trackEvent('external_link', 'click', href);
      });
    });
    
    // Track scroll depth
    const scrollDepths = [25, 50, 75, 100];
    const trackedDepths = new Set();
    
    window.addEventListener('scroll', () => {
      const scrollPercent = ((window.pageYOffset || document.documentElement.scrollTop) / 
        (document.documentElement.scrollHeight - document.documentElement.clientHeight)) * 100;
      
      scrollDepths.forEach(depth => {
        if (scrollPercent >= depth && !trackedDepths.has(depth)) {
          trackedDepths.add(depth);
          (window as any).trackEvent('scroll', 'depth', `${depth}%`, depth);
        }
      });
    });
    
    // Track time on page
    const startTime = Date.now();
    window.addEventListener('beforeunload', () => {
      const timeSpent = Math.round((Date.now() - startTime) / 1000);
      (window as any).trackEvent('engagement', 'time_on_page', '', timeSpent);
    });
  }
</script>
