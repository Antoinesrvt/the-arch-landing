---
// Lead Magnet Modal Component
import type { Language } from '../types';

export interface Props {
  lang: Language;
}

const { lang } = Astro.props;
---

<!-- Lead Magnet Modal - Hidden by default -->
<div 
  id="lead-magnet-modal" 
  class="fixed inset-0 z-[10000] hidden items-center justify-center bg-black/70 backdrop-blur-sm p-4"
  role="dialog"
  aria-labelledby="modal-title"
  aria-modal="true"
>
  <div class="relative w-full max-w-lg bg-gradient-to-br from-slate-900 to-slate-800 rounded-2xl border border-white/10 shadow-2xl shadow-purple-500/20 overflow-hidden">
    
    <!-- Close Button -->
    <button 
      id="close-modal" 
      class="absolute top-4 right-4 z-10 w-10 h-10 rounded-full bg-white/10 hover:bg-white/20 transition-colors flex items-center justify-center text-white"
      aria-label={lang === 'fr' ? 'Fermer' : 'Close'}
    >
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
      </svg>
    </button>

    <!-- Header with Gradient -->
    <div class="bg-gradient-to-r from-purple-600 to-indigo-600 p-8 text-center">
      <div class="text-5xl mb-4">üéÅ</div>
      <h2 id="modal-title" class="text-2xl md:text-3xl font-bold text-white mb-2">
        {lang === 'fr' ? 'T√©l√©chargez Votre Guide Gratuit' : 'Download Your Free Guide'}
      </h2>
      <p class="text-purple-100">
        {lang === 'fr' 
          ? 'Les 10 √©tapes essentielles pour lancer votre projet Web3'
          : '10 essential steps to launch your Web3 project'
        }
      </p>
    </div>

    <!-- Form Content -->
    <div class="p-8">
      <!-- Success Message (hidden by default) -->
      <div id="success-message" class="hidden mb-6 p-4 bg-green-500/10 border border-green-500/30 rounded-lg">
        <div class="flex items-start gap-3">
          <svg class="w-6 h-6 text-green-400 shrink-0 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
          </svg>
          <div>
            <h3 class="text-green-400 font-semibold mb-1">
              {lang === 'fr' ? '‚úÖ C\'est fait !' : '‚úÖ Success!'}
            </h3>
            <p class="text-green-300 text-sm" id="success-text">
              {lang === 'fr' 
                ? 'V√©rifiez votre bo√Æte mail ! Le guide arrive dans quelques instants.' 
                : 'Check your inbox! The guide will arrive in a few moments.'
              }
            </p>
          </div>
        </div>
      </div>

      <!-- Error Message (hidden by default) -->
      <div id="error-message" class="hidden mb-6 p-4 bg-red-500/10 border border-red-500/30 rounded-lg">
        <div class="flex items-start gap-3">
          <svg class="w-6 h-6 text-red-400 shrink-0 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
          </svg>
          <div>
            <h3 class="text-red-400 font-semibold mb-1">
              {lang === 'fr' ? '‚ùå Erreur' : '‚ùå Error'}
            </h3>
            <p class="text-red-300 text-sm" id="error-text">
              {lang === 'fr' 
                ? 'Une erreur est survenue. Veuillez r√©essayer.' 
                : 'An error occurred. Please try again.'
              }
            </p>
          </div>
        </div>
      </div>

      <!-- Form -->
      <form id="lead-magnet-form" method="POST">
        <input type="hidden" name="language" value={lang} />
        
        <!-- Name Field (Optional) -->
        <div class="mb-4">
          <label for="lead-name" class="block text-sm font-semibold text-gray-300 mb-2">
            {lang === 'fr' ? 'Pr√©nom (optionnel)' : 'First Name (optional)'}
          </label>
          <input 
            type="text" 
            id="lead-name" 
            name="name" 
            class="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-lg text-white placeholder-gray-500 focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 outline-none transition-all"
            placeholder={lang === 'fr' ? 'Votre pr√©nom...' : 'Your first name...'}
          />
        </div>

        <!-- Email Field (Required) -->
        <div class="mb-6">
          <label for="lead-email" class="block text-sm font-semibold text-gray-300 mb-2">
            {lang === 'fr' ? 'Email *' : 'Email *'}
          </label>
          <input 
            type="email" 
            id="lead-email" 
            name="email" 
            required
            class="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-lg text-white placeholder-gray-500 focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 outline-none transition-all"
            placeholder={lang === 'fr' ? 'votre@email.com' : 'your@email.com'}
          />
        </div>

        <!-- What's Inside Box -->
        <div class="mb-6 p-4 bg-white/5 border border-white/10 rounded-lg">
          <h3 class="text-white font-semibold mb-3 flex items-center gap-2">
            <svg class="w-5 h-5 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
            </svg>
            {lang === 'fr' ? 'Ce que vous allez recevoir :' : 'What you\'ll get:'}
          </h3>
          <ul class="space-y-2 text-sm text-gray-300">
            <li class="flex items-start gap-2">
              <svg class="w-5 h-5 text-green-400 shrink-0 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
              </svg>
              {lang === 'fr' 
                ? 'Guide PDF complet (10 √©tapes d√©taill√©es)' 
                : 'Complete PDF guide (10 detailed steps)'
              }
            </li>
            <li class="flex items-start gap-2">
              <svg class="w-5 h-5 text-green-400 shrink-0 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
              </svg>
              {lang === 'fr' 
                ? 'Checklist de lancement projet Web3' 
                : 'Web3 project launch checklist'
              }
            </li>
            <li class="flex items-start gap-2">
              <svg class="w-5 h-5 text-green-400 shrink-0 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
              </svg>
              {lang === 'fr' 
                ? 'Bonus: Audit tokenomics offert (1500‚Ç¨)' 
                : 'Bonus: Free tokenomics audit (‚Ç¨1500)'
              }
            </li>
          </ul>
        </div>

        <!-- Submit Button -->
        <button 
          type="submit" 
          id="submit-button"
          class="w-full bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white font-semibold py-4 rounded-lg transition-all duration-300 hover:scale-105 hover:shadow-xl hover:shadow-purple-500/30 flex items-center justify-center gap-2"
        >
          <span id="button-text">
            {lang === 'fr' ? 'üì• T√©l√©charger le Guide Gratuit' : 'üì• Download Free Guide'}
          </span>
          <svg id="button-spinner" class="hidden w-5 h-5 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        </button>

        <!-- Privacy Notice -->
        <p class="mt-4 text-xs text-gray-500 text-center">
          {lang === 'fr' 
            ? 'üîí Vos donn√©es sont prot√©g√©es. Pas de spam, d√©sinscription en 1 clic.'
            : 'üîí Your data is protected. No spam, unsubscribe in 1 click.'
          }
        </p>
      </form>
    </div>
  </div>
</div>

<script>
  // Modal elements
  const modal = document.getElementById('lead-magnet-modal');
  const closeBtn = document.getElementById('close-modal');
  const form = document.getElementById('lead-magnet-form') as HTMLFormElement;
  const submitButton = document.getElementById('submit-button') as HTMLButtonElement;
  const buttonText = document.getElementById('button-text') as HTMLSpanElement;
  const buttonSpinner = document.getElementById('button-spinner') as HTMLElement;
  const successMessage = document.getElementById('success-message');
  const errorMessage = document.getElementById('error-message');

  // Open modal function
  function openModal() {
    modal?.classList.remove('hidden');
    modal?.classList.add('flex');
    document.body.style.overflow = 'hidden';
    
    // Track modal open
    if (typeof (window as any).trackEvent === 'function') {
      (window as any).trackEvent('lead_magnet_modal_opened', {
        timestamp: new Date().toISOString()
      });
    }
  }

  // Close modal function
  function closeModal() {
    modal?.classList.add('hidden');
    modal?.classList.remove('flex');
    document.body.style.overflow = '';
  }

  // Listen for modal triggers
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    if (target.closest('[data-open-lead-magnet]')) {
      e.preventDefault();
      openModal();
    }
  });

  // Close button
  closeBtn?.addEventListener('click', closeModal);

  // Close on backdrop click
  modal?.addEventListener('click', (e) => {
    if (e.target === modal) {
      closeModal();
    }
  });

  // Close on Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !modal?.classList.contains('hidden')) {
      closeModal();
    }
  });

  // Form submission
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    // Hide messages
    successMessage?.classList.add('hidden');
    errorMessage?.classList.add('hidden');
    
    // Show loading state
    submitButton.disabled = true;
    buttonText.classList.add('hidden');
    buttonSpinner?.classList.remove('hidden');
    
    try {
      const formData = new FormData(form);
      
      // Call Astro action via POST
      const response = await fetch('/_actions/captureEmail', {
        method: 'POST',
        body: formData,
      });
      
      const result = await response.json();
      
      if (!response.ok || result.error) {
        throw new Error(result.error?.message || 'Failed to send email');
      }
      
      // Success!
      successMessage?.classList.remove('hidden');
      form.reset();
      
      // Track conversion
      if (typeof (window as any).trackEvent === 'function') {
        (window as any).trackEvent('lead_magnet_downloaded', {
          email: formData.get('email'),
          name: formData.get('name'),
          language: formData.get('language'),
          timestamp: new Date().toISOString()
        });
      }
      
      // Close modal after 3 seconds
      setTimeout(() => {
        closeModal();
        successMessage?.classList.add('hidden');
      }, 3000);
      
    } catch (error) {
      // Error handling
      errorMessage?.classList.remove('hidden');
      const errorText = document.getElementById('error-text');
      if (errorText && error instanceof Error) {
        errorText.textContent = error.message;
      }
      
      // Track error
      if (typeof (window as any).trackEvent === 'function') {
        (window as any).trackEvent('lead_magnet_error', {
          error: error instanceof Error ? error.message : 'Unknown error',
          timestamp: new Date().toISOString()
        });
      }
    } finally {
      // Reset button state
      submitButton.disabled = false;
      buttonText.classList.remove('hidden');
      buttonSpinner?.classList.add('hidden');
    }
  });

  // Make openModal available globally
  (window as any).openLeadMagnetModal = openModal;
</script>
