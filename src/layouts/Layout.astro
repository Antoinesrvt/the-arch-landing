---
import '../styles/global.css';
import '../styles/enhanced-design.css';

export interface Props {
  title: string;
  description: string;
  lang?: string;
}

const { title, description, lang = "fr" } = Astro.props;
---

<!DOCTYPE html>
<html lang={lang} class="scroll-smooth">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5.0, user-scalable=yes">
    <title>{title}</title>
    <meta name="description" content={description}>
    <meta name="keywords" content="conseil, transformation digitale, stratégie, tokenomics, blockchain, innovation, finance, entreprise, web3, DeFi, smart contracts, audit, développement, marketing, communauté">
    <meta name="author" content="The Arch Consulting">
    <meta name="robots" content="index, follow">
    <meta name="theme-color" content="#8A70D6">
    <meta name="msapplication-TileColor" content="#8A70D6">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" content="The Arch Consulting">
    <meta name="application-name" content="The Arch Consulting">
    <meta name="format-detection" content="telephone=no">
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://thearch.consulting/">
    <meta property="og:title" content={title}>
    <meta property="og:description" content={description}>
    <meta property="og:image" content="https://thearch.consulting/og-image.jpg">
    <meta property="og:locale" content="fr_FR">
    <meta property="og:site_name" content="The Arch Consulting">
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image">
    <meta property="twitter:url" content="https://thearch.consulting/">
    <meta property="twitter:title" content={title}>
    <meta property="twitter:description" content={description}>
    <meta property="twitter:image" content="https://thearch.consulting/twitter-image.jpg">
    
    <!-- Preconnect to external domains -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="preconnect" href="https://cdnjs.cloudflare.com">
    <link rel="preconnect" href="https://unpkg.com">
    
    <!-- Fonts - Preload for performance -->
    <link rel="preload" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;900&family=Playfair+Display:ital,wght@0,400..900;1,400..900&display=swap" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <noscript><link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;900&family=Playfair+Display:ital,wght@0,400..900;1,400..900&display=swap"></noscript>
    
    <!-- External Libraries - Load critical CSS first -->
    <!-- Tailwind CSS is loaded locally via our configuration -->
    
    <!-- Critical CSS inline for above-the-fold content -->
    <style>
        /* CSS Custom Properties */
        :root {
            --background-start: #0A0F19;
            --background-end: #111827;
            --primary-text: #F0F2F5;
            --secondary-text: #A8B2C7;
            --accent-purple: #8A70D6;
            --accent-purple-deep: #3730a3;
            --accent-green: #34D399;
            --accent-indigo: #818CF8;
            --accent-glow: rgba(138, 112, 214, 0.5);
            --twilight-blue: #1E293B;
            
            /* Spacing */
            --container-padding: 1.5rem;
            --section-padding: 6rem;
            
            /* Typography */
            --font-primary: 'Inter', sans-serif;
            --font-display: 'Playfair Display', serif;
            
            /* Transitions */
            --transition-fast: 0.2s ease-out;
            --transition-normal: 0.3s ease;
            --transition-slow: 0.4s ease;
            
            /* Shadows */
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
            --shadow-glow: 0 0 30px var(--accent-glow);
        }

        body {
            font-family: var(--font-primary);
            background-color: var(--background-start);
            background-image: 
                radial-gradient(circle at 15% 20%, rgba(138, 112, 214, 0.1), transparent 40%),
                radial-gradient(circle at 85% 80%, rgba(59, 130, 246, 0.1), transparent 40%),
                linear-gradient(180deg, var(--background-start) 0%, var(--background-end) 100%);
            color: var(--primary-text);
            overflow-x: hidden;
            background-attachment: fixed;
            line-height: 1.6;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }
        
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='40' height='40' viewBox='0 0 40 40'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.04'%3E%3Cpath d='M0 38.59l2.83-2.83 1.41 1.41L1.41 40H0v-1.41zM0 1.4l2.83 2.83 1.41-1.41L1.41 0H0v1.41zM38.59 40l-2.83-2.83 1.41-1.41L40 38.59V40h-1.41zM40 1.41l-2.83 2.83-1.41-1.41L38.59 0H40v1.41zM20 18.6l2.83-2.83 1.41 1.41L21.41 20l2.83 2.83-1.41 1.41L20 21.41l-2.83 2.83-1.41-1.41L18.59 20l-2.83-2.83 1.41-1.41L20 18.59z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
            z-index: -1;
        }

        .font-playfair { 
            font-family: var(--font-display); 
        }
        
        main > section {
            position: relative;
            z-index: 20;
        }
        
        #hero-section {
            height: 100vh;
            display: flex;
            align-items: center;
            position: relative;
            z-index: 1;
        }
        
        #hero-canvas-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 10;
        }

        #hero-canvas {
            width: 100%;
            height: 100%;
            outline: none;
        }
        
        .hero-content {
            position: relative;
            z-index: 20;
        }

        .glass-card {
            background: rgba(30, 41, 59, 0.5);
            backdrop-filter: blur(16px);
            -webkit-backdrop-filter: blur(16px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            position: relative;
            overflow: hidden;
            transition: transform var(--transition-slow), background var(--transition-slow);
        }
        
        /* Fallback for browsers that don't support backdrop-filter */
        @supports not (backdrop-filter: blur(16px)) {
            .glass-card {
                background: rgba(30, 41, 59, 0.8);
            }
        }
        
        .glass-card::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: radial-gradient(circle at var(--mouse-x, 50%) var(--mouse-y, 50%), rgba(138, 112, 214, 0.2), transparent 40%);
            border-radius: inherit;
            opacity: 0;
            transition: opacity var(--transition-slow);
            pointer-events: none;
        }

        .glass-card:hover::after {
            opacity: 1;
        }
        
        .glass-card.founder-card:hover, .glass-card.realisation-card:hover {
            transform: translateY(-8px) scale(1.01);
            background: rgba(30, 41, 59, 0.7);
        }
        
        /* Button Animations */
        @property --angle {
          syntax: '<angle>';
          initial-value: 0deg;
          inherits: false;
        }

        .animated-button {
            position: relative;
            transition: transform var(--transition-fast), box-shadow var(--transition-fast), background-color var(--transition-fast);
            will-change: transform;
            overflow: hidden;
            z-index: 1;
        }
        
        .animated-button::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: calc(100% + 4px);
            height: calc(100% + 4px);
            background: conic-gradient(from var(--angle, 0deg), transparent 0%, var(--accent-purple) 50%, transparent 100%);
            border-radius: inherit;
            z-index: -1;
            animation: spin 4s linear infinite;
        }

        .animated-button::after {
            content: '';
            position: absolute;
            top: 2px;
            left: 2px;
            width: calc(100% - 4px);
            height: calc(100% - 4px);
            background: #fff;
            border-radius: 0.375rem;
            z-index: -1;
        }

        .animated-button:hover {
            transform: translateY(-3px) scale(1.03);
            box-shadow: 0 10px 20px rgba(0,0,0,0.2), var(--shadow-glow);
        }
        .animated-button:active {
            transform: translateY(1px) scale(0.98);
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        .btn-secondary-animated {
            transition: transform var(--transition-fast), background-color var(--transition-fast), border-color var(--transition-fast), color var(--transition-fast);
            will-change: transform;
        }
        .btn-secondary-animated:hover {
            transform: translateY(-3px);
            background-color: rgba(255, 255, 255, 0.1);
            border-color: rgba(255, 255, 255, 0.8);
            color: var(--primary-text);
        }
        .btn-secondary-animated:active {
            transform: translateY(1px);
            background-color: rgba(255, 255, 255, 0.05);
        }
        
        @keyframes spin {
          to {
            --angle: 360deg;
          }
        }

        /* Critical CSS for hero section - Let GSAP handle the animations */
        .hero-content { 
            opacity: 1; 
        }
        
        /* Fallback animations for when JS fails */
        .hero-content > * {
            opacity: 1;
            transform: translateY(0);
        }
        
        /* Ensure all animated elements are visible by default */
        .animate-title,
        .animate-card,
        .animate-fade-in {
            opacity: 1;
            transform: translateY(0);
        }
        
        /* Performance optimizations */
        .lazy-load { opacity: 0; transform: translateY(20px); }
        .lazy-load.loaded { opacity: 1; transform: translateY(0); transition: all 0.6s ease; }

        /* Animation performance optimizations */
        .animate-title, .animate-card, .animate-fade-in {
            will-change: transform, opacity;
        }

        /* GPU acceleration for smooth animations */
        .glass-card, .animated-button, .btn-secondary-animated {
            transform: translateZ(0);
            backface-visibility: hidden;
            perspective: 1000px;
        }

        /* Optimize scrolling performance */
        .scroll-smooth {
            scroll-behavior: smooth;
        }

        /* Reduce repaints on hover */
        .glass-card:hover {
            transform: translateY(-8px) scale(1.01) translateZ(0);
        }


        /* Enhanced hover effects */
        .glass-card:hover::before {
            opacity: 1;
        }

        .glass-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(138, 112, 214, 0.1), rgba(52, 211, 153, 0.1));
            border-radius: inherit;
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
        }

        /* Floating animation for cards */
        @keyframes float {
            0%, 100% { transform: translateY(0px) translateZ(0); }
            50% { transform: translateY(-10px) translateZ(0); }
        }

        .float-animation {
            animation: float 6s ease-in-out infinite;
        }

        .float-animation:nth-child(2) {
            animation-delay: 2s;
        }

        .float-animation:nth-child(3) {
            animation-delay: 4s;
        }

        /* Reduced motion support */
        @media (prefers-reduced-motion: reduce) {
            .animate-title, .animate-card, .animate-fade-in {
                animation: none !important;
                transition: none !important;
            }
            
            .hero-content {
                opacity: 1 !important;
            }
        }

        /* Mobile optimizations */
        @media (max-width: 768px) {
            .animate-title, .animate-card {
                transform: none !important;
                opacity: 1 !important;
            }
            
            /* Improve mobile touch targets */
            .nav-link, .mobile-nav-link {
                min-height: 44px;
                display: flex;
                align-items: center;
            }
            
            /* Better mobile spacing */
            .container {
                padding-left: 1rem;
                padding-right: 1rem;
            }
            
            /* Optimize mobile hero */
            #hero-section {
                min-height: 100vh;
                padding-top: 80px;
            }
            
            /* Improve mobile cards */
            .glass-card {
                margin-bottom: 1rem;
            }
            
            /* Better mobile buttons */
            .animated-button, .btn-secondary-animated {
                width: 100%;
                justify-content: center;
                min-height: 48px;
            }
        }

        /* Tablet optimizations */
        @media (min-width: 769px) and (max-width: 1024px) {
            .container {
                padding-left: 2rem;
                padding-right: 2rem;
            }
            
            .grid {
                gap: 1.5rem;
            }
        }
    </style>
    
    <!-- Performance optimization script -->
    <script>
        // Critical performance optimizations
        (function() {
            // Simple fallback animations
            document.addEventListener('DOMContentLoaded', () => {
                // Wait for libraries to load
                setTimeout(() => {
                    if (typeof (window as any).gsap !== 'undefined' && typeof (window as any).ScrollTrigger !== 'undefined') {
                        console.log('🎬 Setting up GSAP animations...');
                        
                        // Register ScrollTrigger
                        (window as any).gsap.registerPlugin((window as any).ScrollTrigger);
                        
                        // Global GSAP configuration for better performance
                        (window as any).gsap.config({
                            nullTargetWarn: false,
                            trialWarn: false
                        });
                        
                        // Set default ease for better consistency
                        (window as any).gsap.defaults({
                            ease: "power2.out"
                        });
                        
                        // Initialize Lenis with better configuration
                        if (typeof (window as any).lenis !== 'undefined') {
                            const lenis = new (window as any).lenis({
                                duration: 1.2,
                                easing: (t: number) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),
                                direction: 'vertical',
                                gestureDirection: 'vertical',
                                smooth: true,
                                mouseMultiplier: 1,
                                smoothTouch: false,
                                touchMultiplier: 2,
                                infinite: false,
                            });
                            
                            lenis.on('scroll', (window as any).ScrollTrigger.update);
                            (window as any).gsap.ticker.add((time: number) => {
                                lenis.raf(time * 1000);
                            });
                            (window as any).gsap.ticker.lagSmoothing(0);
                            console.log('✅ Lenis smooth scroll initialized');
                        }
                        
                        // Hero animations - more specific targeting
                        const heroElements = document.querySelectorAll("#hero-section .hero-content > *");
                        console.log(`🎯 Found ${heroElements.length} hero elements to animate`);
                        if (heroElements.length > 0) {
                            // Set initial state
                            (window as any).gsap.set(heroElements, { opacity: 0, y: 30 });
                            
                            // Animate in with better timing
                            (window as any).gsap.to(heroElements, {
                                opacity: 1,
                                y: 0,
                                duration: 0.8,
                                ease: 'power2.out',
                                stagger: 0.15,
                                delay: 0.3
                            });
                            console.log('✅ Hero elements animated');
                        } else {
                            console.warn('⚠️ No hero elements found for animation');
                        }
                        
                        // Section titles - animate the titles themselves
                        const titleElements = document.querySelectorAll('.animate-title');
                        console.log(`🎯 Found ${titleElements.length} title elements to animate`);
                        titleElements.forEach((title, index) => {
                            console.log(`🎬 Animating title ${index + 1}:`, title);
                            // Set initial state
                            (window as any).gsap.set(title, { opacity: 0, y: 30 });
                            
                            // Animate in with ScrollTrigger
                            (window as any).gsap.to(title, {
                                opacity: 1,
                                y: 0,
                                duration: 0.8,
                                ease: 'power2.out',
                                scrollTrigger: {
                                    trigger: title,
                                    start: 'top 85%',
                                    toggleActions: 'play none none reverse'
                                }
                            });
                        });
                        
                        // Cards animations
                        function animateCards(selector: string, trigger: string) {
                            const cards = document.querySelectorAll(selector);
                            const triggerElement = document.querySelector(trigger);
                            console.log(`🎯 Animating cards: ${selector} (${cards.length} found) with trigger: ${trigger}`);
                            
                            if (cards.length > 0 && triggerElement) {
                                // Set initial state
                                (window as any).gsap.set(cards, { opacity: 0, y: 30 });
                                
                                // Animate in with ScrollTrigger
                                (window as any).gsap.to(cards, {
                                    opacity: 1,
                                    y: 0,
                                    duration: 0.6,
                                    ease: 'power2.out',
                                    stagger: 0.08,
                                    scrollTrigger: {
                                        trigger: triggerElement,
                                        start: 'top 85%',
                                        toggleActions: 'play none none reverse'
                                    }
                                });
                                console.log(`✅ Successfully animated ${cards.length} cards for ${selector}`);
                            } else {
                                console.warn(`⚠️ No cards found for ${selector} or trigger ${trigger} not found`);
                            }
                        }
                        
                        // Animate cards in all sections
                        animateCards('#services .animate-card', '#services');
                        animateCards('#approach .animate-card', '#approach');
                        animateCards('#founders .animate-card', '#founders');
                        animateCards('#network .animate-card', '#network');
                        animateCards('#guests .animate-card', '#guests');
                        animateCards('#media .animate-card', '#media');
                        animateCards('#case-studies .animate-card', '#case-studies');
                        
                        // Also animate any other cards that might be missing
                        animateCards('.glass-card.animate-card', 'main');
                        
                        // Refresh ScrollTrigger to ensure everything is properly calculated
                        (window as any).ScrollTrigger.refresh();
                        
                        // Add class to enable hover transitions after animations complete
                        setTimeout(() => {
                            document.body.classList.add('gsap-complete');
                        }, 2000);
                        
                        console.log('✅ GSAP animations initialized');
                        console.log('🎯 Total ScrollTriggers created:', (window as any).ScrollTrigger.getAll().length);
                    } else {
                        console.warn('⚠️ GSAP not available, using CSS animations');
                        // Add no-gsap class to enable CSS animations
                        document.body.classList.add('no-gsap');
                        // Fallback: ensure all content is visible
                        document.querySelectorAll('.animate-title, .animate-card, .animate-fade-in').forEach(el => {
                            (el as HTMLElement).style.opacity = '1';
                            (el as HTMLElement).style.transform = 'translateY(0)';
                        });
                    }
                }, 1000);
                
                // Emergency fallback after 3 seconds
                setTimeout(() => {
                    document.querySelectorAll('.animate-title, .animate-card, .animate-fade-in').forEach(el => {
                        (el as HTMLElement).style.opacity = '1';
                        (el as HTMLElement).style.transform = 'translateY(0)';
                    });
                    console.log('🚨 Emergency fallback applied - all content made visible');
                }, 3000);
            });
            
            // Lazy load images
            if ('IntersectionObserver' in window) {
                const imageObserver = new IntersectionObserver((entries, observer) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            const img = entry.target as HTMLImageElement;
                            if (img.dataset.src) {
                                img.src = img.dataset.src;
                                img.classList.remove('lazy-load');
                                img.classList.add('loaded');
                                observer.unobserve(img);
                            }
                        }
                    });
                });
                
                // Observe all lazy images
                document.addEventListener('DOMContentLoaded', () => {
                    document.querySelectorAll('img[data-src]').forEach((img) => {
                        imageObserver.observe(img);
                    });
                });
            }
        })();
    </script>
    
    <!-- Polyfills for older browsers -->
    <script>
        // Add polyfills for older browsers
        (function() {
            // IntersectionObserver polyfill
            if (!window.IntersectionObserver) {
                const script = document.createElement('script');
                script.src = 'https://polyfill.io/v3/polyfill.min.js?features=IntersectionObserver';
                script.async = true;
                document.head.appendChild(script);
            }
            
            // requestAnimationFrame polyfill
            if (!window.requestAnimationFrame) {
                window.requestAnimationFrame = function(callback) {
                    return setTimeout(callback, 1000 / 60);
                };
            }
            
            // cancelAnimationFrame polyfill
            if (!window.cancelAnimationFrame) {
                window.cancelAnimationFrame = function(id) {
                    clearTimeout(id);
                };
            }
            
            // Hardware concurrency fallback
            if (!navigator.hardwareConcurrency) {
                Object.defineProperty(navigator, 'hardwareConcurrency', {
                    value: 4,
                    writable: false
                });
            }
            
            // Touch detection fallback
            if (!('ontouchstart' in window) && !navigator.maxTouchPoints) {
                Object.defineProperty(navigator, 'maxTouchPoints', {
                    value: 0,
                    writable: false
                });
            }
        })();
    </script>
    
    <script>
        // Load Three.js with fallback
        function loadThreeJS() {
            return new Promise((resolve, reject) => {
                if (typeof (window as any).THREE !== 'undefined') {
                    resolve((window as any).THREE);
                    return;
                }
                
                const script = document.createElement('script');
                script.src = 'https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js';
                script.onload = () => {
                    // Three.js loaded from CDN
                    resolve((window as any).THREE);
                };
                script.onerror = () => {
                    // Failed to load Three.js from CDN, trying fallback...
                    // Try alternative CDN
                    const fallbackScript = document.createElement('script');
                    fallbackScript.src = 'https://unpkg.com/three@0.128.0/build/three.min.js';
                    fallbackScript.onload = () => {
                        // Three.js loaded from fallback CDN
                        resolve((window as any).THREE);
                    };
                    fallbackScript.onerror = () => {
                        // Failed to load Three.js from all CDNs
                        reject(new Error('Three.js failed to load'));
                    };
                    document.head.appendChild(fallbackScript);
                };
                document.head.appendChild(script);
            });
        }
        
        // Load Three.js immediately
        loadThreeJS().catch(error => {
            // Three.js loading failed, initializing with simplified scene
        });
    </script>
    <!-- Load Three.js with async and defer for better performance -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js" async></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js" async></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js" async></script>
    <script src="https://unpkg.com/@studio-freight/lenis@1.0.42/dist/lenis.min.js" async></script>
    
    <!-- Structured Data for SEO -->
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Organization",
      "name": "The Arch Consulting",
      "url": "https://thearch.consulting",
      "logo": "https://thearch.consulting/favicon.svg",
      "description": "Votre partenaire Web3 complet. 3 experts fondateurs pour la stratégie + un réseau de spécialistes pour l'exécution.",
      "foundingDate": "2024",
      "founders": [
        {
          "@type": "Person",
          "name": "Antoine",
          "jobTitle": "Tech & Architecture",
          "url": "https://www.linkedin.com/in/antoinesrvt/"
        },
        {
          "@type": "Person", 
          "name": "Aaron",
          "jobTitle": "Finance & Tokenomics"
        },
        {
          "@type": "Person",
          "name": "Samir", 
          "jobTitle": "Marketing & Communauté",
          "url": "https://www.linkedin.com/in/tsamir/"
        }
      ],
      "sameAs": [
        "https://x.com/jointhearch",
        "https://www.linkedin.com/company/jointhearch/",
        "https://www.youtube.com/@jointhearch",
        "https://discord.gg/ftK2fnaHa9"
      ],
      "serviceType": "Web3 Consulting",
      "areaServed": "Worldwide",
      "knowsAbout": [
        "Blockchain Technology",
        "Smart Contracts",
        "DeFi",
        "Tokenomics",
        "Web3 Marketing",
        "Community Building",
        "Technical Architecture"
      ]
    }
    </script>
    
</head>
<body class="antialiased">
    <!-- Scroll Progress Indicator -->
    <div id="scroll-progress" class="scroll-progress" aria-hidden="true"></div>
    
    <!-- Skip to main content for accessibility -->
    <a href="#main-content" class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-accent-purple text-white px-4 py-2 rounded-lg z-50" aria-label="Aller au contenu principal">
        Aller au contenu principal
    </a>

    <slot />
    
    <!-- External Libraries - Load synchronously for proper initialization order -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>
    <script src="https://unpkg.com/@studio-freight/lenis@1.0.42/dist/lenis.min.js"></script>
    
    <!-- Data for client-side scripts -->
    <script>
      // Make translation data available globally
      (window as any).TranslationsData = {
        fr: {} as any,
        en: {} as any
      };
      
      // Make case studies data available globally
      (window as any).CaseStudiesData = {
        fr: {
          architech: {
            title: "Architech - Plateforme SaaS de Gestion de Projets",
            challenge: "Architech avait besoin d'une solution complète pour gérer leurs projets de développement logiciel avec une équipe distribuée.",
            solution: "Nous avons développé une plateforme SaaS complète avec gestion des tâches, suivi du temps, collaboration en temps réel et rapports avancés.",
            results: [
              { value: "40%", label: "Réduction du temps de gestion" },
              { value: "85%", label: "Satisfaction client" },
              { value: "200%", label: "Augmentation de la productivité" }
            ]
          }
        },
        en: {
          architech: {
            title: "Architech - SaaS Project Management Platform",
            challenge: "Architech needed a comprehensive solution to manage their software development projects with a distributed team.",
            solution: "We developed a complete SaaS platform with task management, time tracking, real-time collaboration, and advanced reporting.",
            results: [
              { value: "40%", label: "Reduction in management time" },
              { value: "85%", label: "Client satisfaction" },
              { value: "200%", label: "Productivity increase" }
            ]
          }
        }
      };
    </script>
    
</body>
</html>
